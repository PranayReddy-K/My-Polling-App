name: Build results

on:
  push:
    branches:
      - "main"
    # Trigger the workflow on any push to the 'main' branch
    paths:
      - "results/**"
      - ".github/workflows/ci-cd-build-result.yaml"
    # Specify the files and directories that will trigger the workflow when modified
  pull_request:
    branches:
      - "main"
    # Trigger the workflow on any pull request targeting the 'main' branch
    paths:
      - "results/**"
      - ".github/workflows/ci-cd-build-result.yaml"
    # Specify the files and directories that will trigger the workflow when a pull request is created or updated

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run docker-compose up
        working-directory: ./results # Set the directory where docker-compose.yml is located
        run: docker compose up

      - name: Wait for SUT service to stop
        working-directory: ./results # Set the directory where docker-compose.yml is located
        run: |
          while [ "$(docker compose ps -q sut | xargs docker inspect -f '{{.State.Status}}')" != "exited" ]; do
            sleep 5
          done

      - name: Bring down all services
        run: docker compose down

  # docker:
  #   runs-on: ubuntu-latest
  #   # The job will run on the latest version of Ubuntu

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       # This step checks out the code from the repository

  #     # Step 1: Set up Docker Buildx for multi-platform builds
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #       # This action sets up Docker Buildx, which is needed for building multi-platform Docker images

  #     # Step 2: Log in to Docker Hub using credentials stored in secrets
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_TOKEN }}
  #       # This step logs into Docker Hub using the credentials stored in GitHub Secrets

  #     # Step 3: Build and push Docker image to Docker Hub
  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./results
  #         # The context is the directory containing the Dockerfile and other build artifacts
  #         file: results/Dockerfile
  #         # Specify the path to the Dockerfile

  #         platforms: linux/amd64,linux/arm64,linux/arm/v7
  #         # Specify the platforms to build the Docker image for

  #         push: true
  #         # Push the built image to Docker Hub

  #         tags: ${{ secrets.DOCKER_USERNAME }}/my-polling-app:result-${{ github.run_id }}
  #         # Tag the Docker image with the username and GitHub run ID for uniqueness
